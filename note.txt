===============================================================
Compression ratio panel
===============================================================

Compression Ratio: __ [xxx======================]

compressionRatioPanel
compressionRatioCaption
compressionRatio
compressionRatioSlider
compressionRatioValue

===============================================================
MPEG multi frame flow
===============================================================

frames[N]

JPEG first, and every 10th frame

Motion vector and compare reference frame to current frame to generate differences block

All processed frame into byte array

Save

===============================================================
Play frames
===============================================================

Load frames from openFileDialog

Store frames into bitmap[]

play initiate thread

thread start timer event

thread ends when reached to the end of bitmap[]

reflect to % value of slider

pause thread when dragging slider and resume after

===============================================================
Calculating from saved mpeg byte array
===============================================================

byte array size = width + height + iframes * iframeYCrCb + pframes * (pframeYCrCb + pframeMVYCrCb)

iframes = 1 + Floor(pframes / 10)

b - w - h = i * iYCrCb   +  p * (pYCrCb + pMV)

b = w + h + i * (iYCrCb) + (i - 1) * 10 * (pYCrCb + pMVs)

b = w + h + i * iYCrCb + i10pYCrCb + ipMVs - 10pYCrCb - 10pMVs

b - w - h + 10pyCrCb + 10pMVs = i (iYCrCb + 10pYCrCb + pMVs)

i = (b - w - h + 10pyCrCb + 10pMVs) / (iYCrCb + 10pYCrCb + pMVs)

// if p > 10
p = (i - 1) * 10

does not work since pframes are not always a multiple of 10


            int numOfBlock = width / N * height / N;
            int curBlock = 0;
            byte[] result = new byte[reference.Length];
            if (numOfBlock < ThreadSetting.THREAD_THRESHOLD)
            {
                InverseDiffBlockThread(result, curBlock, numOfBlock, motionVectors, reference, diffBlock, width, height, N);
            }
            else
            {
                double segment = numOfBlock / (double)ThreadSetting.threadNum;
                double job = segment;
                Thread[] threads = new Thread[ThreadSetting.threadNum];
                for (int i = 0; i < ThreadSetting.threadNum; i++)
                {
                    int z = i;
                    int threadNumOfBlock = (int)job;
                    int curThreadBlock = curBlock;
                    job -= threadNumOfBlock;
                    job += segment;
                    threads[z] = new Thread(() => InverseDiffBlockThread(result, curBlock, threadNumOfBlock, motionVectors, reference, diffBlock, width, height, N));
                    curBlock += threadNumOfBlock;
                }
                foreach (Thread t in threads)
                {
                    t.Start();
                }
                foreach (Thread t in threads)
                {
                    t.Join();
                }
            }
